generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
//  url      = "postgresql://baddit:baddit@localhost/baddit"
}

model User {
  id                      String                  @id @default(uuid())
  username                String                  @unique
  hashedPassword          String
  email                   String                  @unique
  emailVerified           Boolean                 @default(false)
  avatarUrl               String                  @default("https://res.cloudinary.com/drzvajzd4/image/upload/f_auto,q_auto/v1/defaults/default_avatar")
  status                  Status                  @default(STANDARD)
  role                    UserRole                @default(USER)
  gender                  Gender                  @default(Unknown)
  registeredAt            DateTime                @default(now())
  updateAt                DateTime                @updatedAt
  messagePrivacy          MessagePrivacy          @default(EVERYONE)
  communitiesOwned        Community[]
  emailTokens             EmailToken[]
  communitiesParticipated UserCommunity[]
  post                    Post[]
  postVote                PostVote[]
  comment                 Comment[]
  commentVote             CommentVote[]
  notifications           Notifications[]         @relation("NotificationTargets")
  readNotifications       Notifications[]         @relation("NotificationReadBy")
  sentFriendRequests      FriendRequests[]        @relation("SentRequests")
  receivedFriendRequests  FriendRequests[]        @relation("ReceivedRequests")
  usersRelatedWith        UserRelations[]         @relation("RelatedWith")
  usersRelatedBy          UserRelations[]         @relation("RelatedBy")
  subscribedPosts         Post[]                  @relation("SubscribedToPost")
  subscribedComments      Comment[]               @relation("SubscribedToComment")
  chatChannels            ChatChannels[]          @relation("IsChatMemberOfChannel")
  chatModeratorChannels   ChatChannels[]          @relation("IsChatModeratorOfChannel")
  sentMessages            ChatMessages[]
  readStatus              ChatChannelReadStatus[]
  fcmTokens               FcmTokens[]
  reportsMade     Report[]  @relation("ReportCreator")
  reportsReceived Report[]  @relation("ReportedUser")
  reportsResolved Report[]  @relation("ReportResolver")
}

model Report {
  id        String    @id @default(uuid())
  type      ReportType
  content  String
  reporter    User         @relation("ReportCreator", fields: [reporterId], references: [id])
  reporterId  String
  status      ReportStatus @default(PENDING)
  createdAt   DateTime     @default(now())

  resolvedBy  User?        @relation("ReportResolver", fields: [resolvedById], references: [id])
  resolvedById String?

  reportedUser User?       @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId String?

  reportedPost Post?       @relation("ReportedPost", fields: [reportedPostId], references: [id])
  reportedPostId String?
}

model FcmTokens {
  id             String   @id @default(uuid())
  User           User     @relation(fields: [userId], references: [id])
  userId         String
  token          String   @unique
  lastAccessDate DateTime @default(now())
}

model UserRelations {
  id           String       @id @default(uuid())
  user         User         @relation("RelatedWith", fields: [userId], references: [id])
  userId       String
  targetUser   User         @relation("RelatedBy", fields: [targetUserId], references: [id])
  targetUserId String
  relation     UserRelation
  createdAt    DateTime     @default(now())
}

model EmailToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expireAt  DateTime
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
}

model Notifications {
  id          String           @id @default(uuid())
  targetUsers User[]           @relation("NotificationTargets")
  type        NotificationType
  createdAt   DateTime         @default(now())
  payload     Json
  readBy      User[]           @relation("NotificationReadBy")
}

model FriendRequests {
  id         String              @id @default(uuid())
  sender     User                @relation("SentRequests", fields: [senderId], references: [id])
  senderId   String
  receiver   User                @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())
}

model ChatChannels {
  id         String                  @id @default(uuid())
  name       String
  avatarUrl  String                  @default("https://placehold.co/400.png")
  members    User[]                  @relation("IsChatMemberOfChannel")
  moderators User[]                  @relation("IsChatModeratorOfChannel")
  messages   ChatMessages[]
  type       ChatChannelType        @default(DIRECT)
  isDeleted Boolean                 @default(false)
  createdAt  DateTime                @default(now())
  readStatus ChatChannelReadStatus[]
}

model ChatMessages {
  id             String                  @id @default(uuid())
  sender         User                    @relation(fields: [senderId], references: [id])
  senderId       String
  channel        ChatChannels            @relation(fields: [channelId], references: [id])
  channelId      String
  content        String
  type           ChatMessageType         @default(TEXT)
  mediaUrls      String[]
  createdAt      DateTime                @default(now())
  isDeleted      Boolean                 @default(false)
  chatReadStatus ChatChannelReadStatus[]
}

model ChatChannelReadStatus {
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  channel           ChatChannels  @relation(fields: [channelId], references: [id])
  channelId         String
  lastReadMessage   ChatMessages? @relation(fields: [lastReadMessageId], references: [id])
  lastReadMessageId String?

  @@id([userId, channelId])
}

model Community {
  id          String          @id @default(uuid())
  name        String          @unique
  ownerId     String
  description String
  logoUrl     String          @default("https://placehold.co/400.png")
  bannerUrl   String          @default("https://placehold.co/1500x400/png")
  status      Status          @default(STANDARD)
  memberCount Int             @default(0)
  deleted     Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updateAt    DateTime        @updatedAt
  User        User            @relation(fields: [ownerId], references: [id])
  user        UserCommunity[]
  Post        Post[]
}

model UserCommunity {
  userId        String
  communityId   String
  communityRole CommunityRole @default(MEMBER)
  banned        Boolean       @default(false)
  deleted       Boolean       @default(false)
  joined        Boolean       @default(true)
  community     Community     @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, communityId])
}

model Post {
  id            String     @id @default(uuid())
  type          PostType
  title         String
  content       String
  mediaUrls     String[]
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  community     Community? @relation(fields: [communityName], references: [name])
  communityName String?
  deleted       Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  score         Int        @default(0)
  vote          PostVote[]
  comments      Comment[]
  subscribers   User[]     @relation("SubscribedToPost")
  reports     Report[]  @relation("ReportedPost")
}

model PostVote {
  user   User      @relation(fields: [userId], references: [id])
  userId String
  post   Post      @relation(fields: [postId], references: [id])
  postId String
  state  VoteState

  @@id([userId, postId])
}

model Comment {
  id          String        @id @default(uuid())
  content     String
  author      User          @relation(fields: [authorId], references: [id])
  authorId    String
  parent      Comment?      @relation("Comment_Relations", fields: [parentId], references: [id])
  parentId    String?
  post        Post?         @relation(fields: [postId], references: [id])
  postId      String?
  deleted     Boolean       @default(false)
  updatedAt   DateTime      @updatedAt
  createdAt   DateTime      @default(now())
  children    Comment[]     @relation("Comment_Relations")
  score       Int           @default(0)
  CommentVote CommentVote[]
  subscribers User[]        @relation("SubscribedToComment")
}

model CommentVote {
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment   @relation(fields: [commentId], references: [id])
  commentId String
  state     VoteState

  @@id([userId, commentId])
}

enum UserRole {
  USER
  ADMIN
}

enum CommunityRole {
  MEMBER
  MODERATOR
  ADMIN
}

enum Status {
  STANDARD
  SUSPENDED
}

enum PostType {
  TEXT
  LINK
  MEDIA
}

enum VoteState {
  UPVOTE
  DOWNVOTE
}

enum Gender {
  Male
  Female
  Unknown
}

enum MessagePrivacy {
  EVERYONE
  FRIENDS
}

enum NotificationType {
  GLOBAL
  NEW_COMMENT
  FRIEND_REQUEST
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum UserRelation {
  FRIEND
  BLOCKED
}

enum ChatMessageType {
  TEXT
  IMAGE
}

enum ChatChannelType{
  DIRECT
  GROUP
}

enum ReportType{
  POST
  USER
}

enum ReportStatus{
  PENDING
  RESOLVED
}